
lcd_atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080006c  0080006c  0000043a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d5  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060c  00000000  00000000  0000052f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000179  00000000  00000000  00000b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000536  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000197  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b4  00000000  00000000  00001423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 90 01 	call	0x320	; 0x320 <main>
  8a:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  92:	8a ef       	ldi	r24, 0xFA	; 250
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	fc 01       	movw	r30, r24
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  9c:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  9e:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
  a0:	40 e3       	ldi	r20, 0x30	; 48
  a2:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  a4:	aa 9a       	sbi	0x15, 2	; 21
  a6:	22 ee       	ldi	r18, 0xE2	; 226
  a8:	34 e0       	ldi	r19, 0x04	; 4
  aa:	f9 01       	movw	r30, r18
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_set_4bit+0x1a>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  b0:	aa 98       	cbi	0x15, 2	; 21
  b2:	fc 01       	movw	r30, r24
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  b8:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  ba:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
  bc:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  be:	aa 9a       	sbi	0x15, 2	; 21
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_set_4bit+0x30>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  c6:	aa 98       	cbi	0x15, 2	; 21
  c8:	fc 01       	movw	r30, r24
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  ce:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  d0:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3
  d2:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  d4:	aa 9a       	sbi	0x15, 2	; 21
  d6:	f9 01       	movw	r30, r18
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_set_4bit+0x46>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  dc:	aa 98       	cbi	0x15, 2	; 21
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
  e2:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
  e4:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
  e6:	80 e2       	ldi	r24, 0x20	; 32
  e8:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
  ea:	aa 9a       	sbi	0x15, 2	; 21
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_set_4bit+0x5c>
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
  f2:	aa 98       	cbi	0x15, 2	; 21

	
}
  f4:	08 95       	ret

000000f6 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
  f6:	95 b3       	in	r25, 0x15	; 21
  f8:	9f 70       	andi	r25, 0x0F	; 15
  fa:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
  fc:	25 b3       	in	r18, 0x15	; 21
  fe:	98 2f       	mov	r25, r24
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	92 2b       	or	r25, r18
 104:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
 106:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 108:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 10a:	aa 9a       	sbi	0x15, 2	; 21
 10c:	22 ee       	ldi	r18, 0xE2	; 226
 10e:	34 e0       	ldi	r19, 0x04	; 4
 110:	f9 01       	movw	r30, r18
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
 116:	aa 98       	cbi	0x15, 2	; 21
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 118:	95 b3       	in	r25, 0x15	; 21
 11a:	9f 70       	andi	r25, 0x0F	; 15
 11c:	95 bb       	out	0x15, r25	; 21
	lcd_port |= cmd;
 11e:	95 b3       	in	r25, 0x15	; 21
 120:	82 95       	swap	r24
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	98 2b       	or	r25, r24
 126:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
 128:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 12a:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 12c:	aa 9a       	sbi	0x15, 2	; 21
 12e:	c9 01       	movw	r24, r18
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
 134:	aa 98       	cbi	0x15, 2	; 21
}
 136:	08 95       	ret

00000138 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 138:	0e 94 49 00 	call	0x92	; 0x92 <lcd_set_4bit>
 13c:	8a ef       	ldi	r24, 0xFA	; 250
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_init+0x8>
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 144:	88 e2       	ldi	r24, 0x28	; 40
 146:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x01);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x06);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x0E);
 156:	8e e0       	ldi	r24, 0x0E	; 14
 158:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x80);
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
		
}
 162:	08 95       	ret

00000164 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 164:	95 b3       	in	r25, 0x15	; 21
 166:	9f 70       	andi	r25, 0x0F	; 15
 168:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
 16a:	25 b3       	in	r18, 0x15	; 21
 16c:	98 2f       	mov	r25, r24
 16e:	90 7f       	andi	r25, 0xF0	; 240
 170:	92 2b       	or	r25, r18
 172:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
 174:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 176:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 178:	aa 9a       	sbi	0x15, 2	; 21
 17a:	22 ee       	ldi	r18, 0xE2	; 226
 17c:	34 e0       	ldi	r19, 0x04	; 4
 17e:	f9 01       	movw	r30, r18
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
 184:	aa 98       	cbi	0x15, 2	; 21

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 186:	95 b3       	in	r25, 0x15	; 21
 188:	9f 70       	andi	r25, 0x0F	; 15
 18a:	95 bb       	out	0x15, r25	; 21
	lcd_port |= letter;
 18c:	95 b3       	in	r25, 0x15	; 21
 18e:	82 95       	swap	r24
 190:	80 7f       	andi	r24, 0xF0	; 240
 192:	98 2b       	or	r25, r24
 194:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
 196:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
 198:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
 19a:	aa 9a       	sbi	0x15, 2	; 21
 19c:	c9 01       	movw	r24, r18
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
 1a2:	aa 98       	cbi	0x15, 2	; 21
}
 1a4:	08 95       	ret

000001a6 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 1a6:	80 e8       	ldi	r24, 0x80	; 128
 1a8:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
}
 1ac:	08 95       	ret

000001ae <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 1b6:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_wr_char>
		str++;
 1ba:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 1bc:	88 81       	ld	r24, Y
 1be:	88 23       	and	r24, r24
 1c0:	d1 f7       	brne	.-12     	; 0x1b6 <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 1c8:	82 30       	cpi	r24, 0x02	; 2
 1ca:	69 f0       	breq	.+26     	; 0x1e6 <lcd_cursor+0x1e>
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	18 f4       	brcc	.+6      	; 0x1d6 <lcd_cursor+0xe>
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	a9 f4       	brne	.+42     	; 0x1fe <lcd_cursor+0x36>
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <lcd_cursor+0x18>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	49 f0       	breq	.+18     	; 0x1ec <lcd_cursor+0x24>
 1da:	84 30       	cpi	r24, 0x04	; 4
 1dc:	81 f4       	brne	.+32     	; 0x1fe <lcd_cursor+0x36>
 1de:	0b c0       	rjmp	.+22     	; 0x1f6 <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 1e0:	86 2f       	mov	r24, r22
 1e2:	81 58       	subi	r24, 0x81	; 129
 1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 1e6:	86 2f       	mov	r24, r22
 1e8:	81 54       	subi	r24, 0x41	; 65
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
 1ec:	86 2f       	mov	r24, r22
 1ee:	8d 56       	subi	r24, 0x6D	; 109
 1f0:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
 1f4:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 1f6:	86 2f       	mov	r24, r22
 1f8:	8d 52       	subi	r24, 0x2D	; 45
 1fa:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
 1fe:	08 95       	ret

00000200 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	8a 01       	movw	r16, r20
 20a:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 20c:	88 23       	and	r24, r24
 20e:	11 f0       	breq	.+4      	; 0x214 <lcd_print+0x14>
 210:	66 23       	and	r22, r22
 212:	19 f4       	brne	.+6      	; 0x21a <lcd_print+0x1a>
	{
		lcd_home();
 214:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_home>
 218:	02 c0       	rjmp	.+4      	; 0x21e <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 21a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 21e:	c5 30       	cpi	r28, 0x05	; 5
 220:	d1 05       	cpc	r29, r1
 222:	71 f4       	brne	.+28     	; 0x240 <lcd_print+0x40>
	{
		million=value/10000+48;
 224:	c8 01       	movw	r24, r16
 226:	60 e1       	ldi	r22, 0x10	; 16
 228:	77 e2       	ldi	r23, 0x27	; 39
 22a:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodhi4>
 22e:	cb 01       	movw	r24, r22
 230:	c0 96       	adiw	r24, 0x30	; 48
 232:	90 93 6d 00 	sts	0x006D, r25
 236:	80 93 6c 00 	sts	0x006C, r24
		lcd_wr_char(million);
 23a:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_wr_char>
 23e:	05 c0       	rjmp	.+10     	; 0x24a <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
 240:	c4 30       	cpi	r28, 0x04	; 4
 242:	d1 05       	cpc	r29, r1
 244:	11 f0       	breq	.+4      	; 0x24a <lcd_print+0x4a>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	16 c0       	rjmp	.+44     	; 0x276 <lcd_print+0x76>
	{
		temp = value/1000;
 24a:	c8 01       	movw	r24, r16
 24c:	68 ee       	ldi	r22, 0xE8	; 232
 24e:	73 e0       	ldi	r23, 0x03	; 3
 250:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodhi4>
 254:	cb 01       	movw	r24, r22
 256:	60 93 6e 00 	sts	0x006E, r22
 25a:	90 93 6f 00 	sts	0x006F, r25
		thousand = temp%10 + 48;
 25e:	6a e0       	ldi	r22, 0x0A	; 10
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodhi4>
 266:	c0 96       	adiw	r24, 0x30	; 48
 268:	90 93 77 00 	sts	0x0077, r25
 26c:	80 93 76 00 	sts	0x0076, r24
		lcd_wr_char(thousand);
 270:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_wr_char>
 274:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
 276:	c3 30       	cpi	r28, 0x03	; 3
 278:	d1 05       	cpc	r29, r1
 27a:	21 f0       	breq	.+8      	; 0x284 <lcd_print+0x84>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	11 f0       	breq	.+4      	; 0x284 <lcd_print+0x84>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	16 c0       	rjmp	.+44     	; 0x2b0 <lcd_print+0xb0>
	{
		temp = value/100;
 284:	c8 01       	movw	r24, r16
 286:	64 e6       	ldi	r22, 0x64	; 100
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodhi4>
 28e:	cb 01       	movw	r24, r22
 290:	60 93 6e 00 	sts	0x006E, r22
 294:	90 93 6f 00 	sts	0x006F, r25
		hundred = temp%10 + 48;
 298:	6a e0       	ldi	r22, 0x0A	; 10
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodhi4>
 2a0:	c0 96       	adiw	r24, 0x30	; 48
 2a2:	90 93 73 00 	sts	0x0073, r25
 2a6:	80 93 72 00 	sts	0x0072, r24
		lcd_wr_char(hundred);
 2aa:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_wr_char>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
 2b0:	c2 30       	cpi	r28, 0x02	; 2
 2b2:	d1 05       	cpc	r29, r1
 2b4:	21 f0       	breq	.+8      	; 0x2be <lcd_print+0xbe>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	11 f0       	breq	.+4      	; 0x2be <lcd_print+0xbe>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	16 c0       	rjmp	.+44     	; 0x2ea <lcd_print+0xea>
	{
		temp = value/10;
 2be:	c8 01       	movw	r24, r16
 2c0:	6a e0       	ldi	r22, 0x0A	; 10
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodhi4>
 2c8:	cb 01       	movw	r24, r22
 2ca:	60 93 6e 00 	sts	0x006E, r22
 2ce:	90 93 6f 00 	sts	0x006F, r25
		tens = temp%10 + 48;
 2d2:	6a e0       	ldi	r22, 0x0A	; 10
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodhi4>
 2da:	c0 96       	adiw	r24, 0x30	; 48
 2dc:	90 93 71 00 	sts	0x0071, r25
 2e0:	80 93 70 00 	sts	0x0070, r24
		lcd_wr_char(tens);
 2e4:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_wr_char>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
 2ea:	c1 30       	cpi	r28, 0x01	; 1
 2ec:	d1 05       	cpc	r29, r1
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <lcd_print+0xf4>
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	61 f4       	brne	.+24     	; 0x30c <lcd_print+0x10c>
	{
		unit = value%10 + 48;
 2f4:	c8 01       	movw	r24, r16
 2f6:	6a e0       	ldi	r22, 0x0A	; 10
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	0e 94 b7 01 	call	0x36e	; 0x36e <__udivmodhi4>
 2fe:	c0 96       	adiw	r24, 0x30	; 48
 300:	90 93 75 00 	sts	0x0075, r25
 304:	80 93 74 00 	sts	0x0074, r24
		lcd_wr_char(unit);
 308:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_wr_char>
	}
	if(digits>5)
 30c:	26 97       	sbiw	r28, 0x06	; 6
 30e:	1c f0       	brlt	.+6      	; 0x316 <lcd_print+0x116>
	{
		lcd_wr_char('E');
 310:	85 e4       	ldi	r24, 0x45	; 69
 312:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_wr_char>
	}
	
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>
#include "lcd.h"
#define F_CPU 12000000UL
int main()
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29

 DDRC = DDRC | 0xF7; 
 324:	84 b3       	in	r24, 0x14	; 20
 326:	87 6f       	ori	r24, 0xF7	; 247
 328:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;
 32a:	85 b3       	in	r24, 0x15	; 21
 32c:	80 78       	andi	r24, 0x80	; 128
 32e:	85 bb       	out	0x15, r24	; 21

 lcd_init();
 330:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_init>
 lcd_cursor(1,1);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_cursor>
 33c:	c9 e1       	ldi	r28, 0x19	; 25
 33e:	d0 e0       	ldi	r29, 0x00	; 0
 while(1)
 {
 	lcd_string("hello");
 340:	80 e6       	ldi	r24, 0x60	; 96
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_string>
 348:	80 e2       	ldi	r24, 0x20	; 32
 34a:	9e e4       	ldi	r25, 0x4E	; 78
 34c:	fe 01       	movw	r30, r28
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 352:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 354:	d9 f7       	brne	.-10     	; 0x34c <main+0x2c>
	_delay_ms(2000);

 	lcd_string("hell");
 356:	86 e6       	ldi	r24, 0x66	; 102
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_string>
 35e:	80 e2       	ldi	r24, 0x20	; 32
 360:	9e e4       	ldi	r25, 0x4E	; 78
 362:	fe 01       	movw	r30, r28
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 368:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 36a:	d9 f7       	brne	.-10     	; 0x362 <main+0x42>
 36c:	e9 cf       	rjmp	.-46     	; 0x340 <main+0x20>

0000036e <__udivmodhi4>:
 36e:	aa 1b       	sub	r26, r26
 370:	bb 1b       	sub	r27, r27
 372:	51 e1       	ldi	r21, 0x11	; 17
 374:	07 c0       	rjmp	.+14     	; 0x384 <__udivmodhi4_ep>

00000376 <__udivmodhi4_loop>:
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	a6 17       	cp	r26, r22
 37c:	b7 07       	cpc	r27, r23
 37e:	10 f0       	brcs	.+4      	; 0x384 <__udivmodhi4_ep>
 380:	a6 1b       	sub	r26, r22
 382:	b7 0b       	sbc	r27, r23

00000384 <__udivmodhi4_ep>:
 384:	88 1f       	adc	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	5a 95       	dec	r21
 38a:	a9 f7       	brne	.-22     	; 0x376 <__udivmodhi4_loop>
 38c:	80 95       	com	r24
 38e:	90 95       	com	r25
 390:	bc 01       	movw	r22, r24
 392:	cd 01       	movw	r24, r26
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
