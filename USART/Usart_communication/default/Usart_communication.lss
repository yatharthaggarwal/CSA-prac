
Usart_communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000008e  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000326  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e1  00000000  00000000  00000632  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000301  00000000  00000000  00000813  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000165  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000136  00000000  00000000  00000d09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000e3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  6c:	1f 93       	push	r17
	char data;
	DDRA = 0xff;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8a bb       	out	0x1a, r24	; 26
	USARTInit();
  72:	0e 94 44 00 	call	0x88	; 0x88 <USARTInit>
	//USARTWriteInt(123,3);
	//_delay_ms(1000);
	data=USARTReadChar();
	if(data=='A')
	{
		PORTA=0x01;
  76:	11 e0       	ldi	r17, 0x01	; 1
	{
	//USARTWriteChar('A');
	//_delay_ms(1000);
	//USARTWriteInt(123,3);
	//_delay_ms(1000);
	data=USARTReadChar();
  78:	0e 94 4c 00 	call	0x98	; 0x98 <USARTReadChar>
	if(data=='A')
  7c:	81 34       	cpi	r24, 0x41	; 65
  7e:	11 f4       	brne	.+4      	; 0x84 <main+0x18>
	{
		PORTA=0x01;
  80:	1b bb       	out	0x1b, r17	; 27
  82:	fa cf       	rjmp	.-12     	; 0x78 <main+0xc>
	}
	else
	{
		PORTA=0x00;
  84:	1b ba       	out	0x1b, r1	; 27
  86:	f8 cf       	rjmp	.-16     	; 0x78 <main+0xc>

00000088 <USARTInit>:
void USARTInit()
{

   //Set Baud rate

   UBRRL = 12;
  88:	8c e0       	ldi	r24, 0x0C	; 12
  8a:	89 b9       	out	0x09, r24	; 9
   UBRRH = 0;
  8c:	10 bc       	out	0x20, r1	; 32

   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  8e:	86 e8       	ldi	r24, 0x86	; 134
  90:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<TXCIE)|(1<<TXEN)|(1<<RXEN)|(1<<RXCIE);
  92:	88 ed       	ldi	r24, 0xD8	; 216
  94:	8a b9       	out	0x0a, r24	; 10


}
  96:	08 95       	ret

00000098 <USARTReadChar>:
//available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
  98:	5f 9b       	sbis	0x0b, 7	; 11
  9a:	fe cf       	rjmp	.-4      	; 0x98 <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
  9c:	8c b1       	in	r24, 0x0c	; 12
}
  9e:	08 95       	ret

000000a0 <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
  a4:	8c b9       	out	0x0c, r24	; 12
}
  a6:	08 95       	ret

000000a8 <transmit_char>:
{
	while(*data) USARTWriteChar(*data++);
}
*/
void transmit_char(char data)
{
  a8:	98 2f       	mov	r25, r24
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <transmit_char+0x2>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
  ae:	8e e5       	ldi	r24, 0x5E	; 94
  b0:	8c b9       	out	0x0c, r24	; 12
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <transmit_char+0xa>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
  b6:	9c b9       	out	0x0c, r25	; 12
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <transmit_char+0x10>
*/
void transmit_char(char data)
{
	USARTWriteChar(SOT);
	USARTWriteChar(data);
	USARTWriteChar(~data);
  bc:	90 95       	com	r25
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
  be:	9c b9       	out	0x0c, r25	; 12
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
  c0:	5d 9b       	sbis	0x0b, 5	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <transmit_char+0x18>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
  c4:	85 e2       	ldi	r24, 0x25	; 37
  c6:	8c b9       	out	0x0c, r24	; 12
{
	USARTWriteChar(SOT);
	USARTWriteChar(data);
	USARTWriteChar(~data);
	USARTWriteChar(EOT);
}
  c8:	08 95       	ret

000000ca <USARTWriteInt>:

void USARTWriteInt(int val,unsigned int field_length)
{
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	00 d0       	rcall	.+0      	; 0xd4 <USARTWriteInt+0xa>
  d4:	00 d0       	rcall	.+0      	; 0xd6 <USARTWriteInt+0xc>
  d6:	0f 92       	push	r0
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	9c 01       	movw	r18, r24
  de:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
  e0:	fe 01       	movw	r30, r28
  e2:	31 96       	adiw	r30, 0x01	; 1
  e4:	85 e0       	ldi	r24, 0x05	; 5
  e6:	df 01       	movw	r26, r30
  e8:	1d 92       	st	X+, r1
  ea:	8a 95       	dec	r24
  ec:	e9 f7       	brne	.-6      	; 0xe8 <USARTWriteInt+0x1e>
  ee:	fe 01       	movw	r30, r28
  f0:	35 96       	adiw	r30, 0x05	; 5
  f2:	0d c0       	rjmp	.+26     	; 0x10e <USARTWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
  f4:	c9 01       	movw	r24, r18
  f6:	6a e0       	ldi	r22, 0x0A	; 10
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	0e 94 cc 00 	call	0x198	; 0x198 <__divmodhi4>
  fe:	80 83       	st	Z, r24
	val=val/10;
 100:	c9 01       	movw	r24, r18
 102:	6a e0       	ldi	r22, 0x0A	; 10
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	0e 94 cc 00 	call	0x198	; 0x198 <__divmodhi4>
 10a:	9b 01       	movw	r18, r22
 10c:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 10e:	21 15       	cp	r18, r1
 110:	31 05       	cpc	r19, r1
 112:	81 f7       	brne	.-32     	; 0xf4 <USARTWriteInt+0x2a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 114:	bf ef       	ldi	r27, 0xFF	; 255
 116:	0f 3f       	cpi	r16, 0xFF	; 255
 118:	1b 07       	cpc	r17, r27
 11a:	71 f4       	brne	.+28     	; 0x138 <USARTWriteInt+0x6e>
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b0 e0       	ldi	r27, 0x00	; 0
		while(str[j]==0) j++;
 120:	9e 01       	movw	r18, r28
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	01 c0       	rjmp	.+2      	; 0x12a <USARTWriteInt+0x60>
 128:	11 96       	adiw	r26, 0x01	; 1
 12a:	f9 01       	movw	r30, r18
 12c:	ea 0f       	add	r30, r26
 12e:	fb 1f       	adc	r31, r27
 130:	80 81       	ld	r24, Z
 132:	88 23       	and	r24, r24
 134:	c9 f3       	breq	.-14     	; 0x128 <USARTWriteInt+0x5e>
 136:	04 c0       	rjmp	.+8      	; 0x140 <USARTWriteInt+0x76>
	else
		j=5-field_length;
 138:	a5 e0       	ldi	r26, 0x05	; 5
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	a0 1b       	sub	r26, r16
 13e:	b1 0b       	sbc	r27, r17

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
 140:	a5 30       	cpi	r26, 0x05	; 5
 142:	b1 05       	cpc	r27, r1
 144:	ac f4       	brge	.+42     	; 0x170 <USARTWriteInt+0xa6>
	{
	USARTWriteChar(48+str[i]);
 146:	ac 0f       	add	r26, r28
 148:	bd 1f       	adc	r27, r29
 14a:	11 96       	adiw	r26, 0x01	; 1
 14c:	8c 91       	ld	r24, X
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 14e:	5d 9b       	sbis	0x0b, 5	; 11
 150:	fe cf       	rjmp	.-4      	; 0x14e <USARTWriteInt+0x84>
		j=5-field_length;

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
	{
	USARTWriteChar(48+str[i]);
 152:	80 5d       	subi	r24, 0xD0	; 208
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 154:	8c b9       	out	0x0c, r24	; 12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 156:	84 ec       	ldi	r24, 0xC4	; 196
 158:	99 e0       	ldi	r25, 0x09	; 9
 15a:	fc 01       	movw	r30, r24
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <USARTWriteInt+0x92>
 160:	fc 01       	movw	r30, r24
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <USARTWriteInt+0x98>
 166:	fc 01       	movw	r30, r24
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <USARTWriteInt+0x9e>
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <USARTWriteInt+0xa2>
	//USARTWriteChar(48+str[i]);
	for(i=0;i<4;i++)
	{
	_delay_ms(10);
	}
}}
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	08 95       	ret

00000184 <write>:
void write(char *data)
{
 184:	fc 01       	movw	r30, r24
 186:	04 c0       	rjmp	.+8      	; 0x190 <write+0xc>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 188:	5d 9b       	sbis	0x0b, 5	; 11
 18a:	fe cf       	rjmp	.-4      	; 0x188 <write+0x4>
	//USARTWriteChar(data);
	//USARTWriteChar('\n');
	//USARTWriteInt(data,2);*/
	while(*data) 
	{
	USARTWriteChar(*data++);
 18c:	31 96       	adiw	r30, 0x01	; 1
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 18e:	8c b9       	out	0x0c, r24	; 12
	USARTWriteChar(4);
	//while(*data)
	//USARTWriteChar(data);
	//USARTWriteChar('\n');
	//USARTWriteInt(data,2);*/
	while(*data) 
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	c9 f7       	brne	.-14     	; 0x188 <write+0x4>
	{
	USARTWriteChar(*data++);
	}
}
 196:	08 95       	ret

00000198 <__divmodhi4>:
 198:	97 fb       	bst	r25, 7
 19a:	09 2e       	mov	r0, r25
 19c:	07 26       	eor	r0, r23
 19e:	0a d0       	rcall	.+20     	; 0x1b4 <__divmodhi4_neg1>
 1a0:	77 fd       	sbrc	r23, 7
 1a2:	04 d0       	rcall	.+8      	; 0x1ac <__divmodhi4_neg2>
 1a4:	0c d0       	rcall	.+24     	; 0x1be <__udivmodhi4>
 1a6:	06 d0       	rcall	.+12     	; 0x1b4 <__divmodhi4_neg1>
 1a8:	00 20       	and	r0, r0
 1aa:	1a f4       	brpl	.+6      	; 0x1b2 <__divmodhi4_exit>

000001ac <__divmodhi4_neg2>:
 1ac:	70 95       	com	r23
 1ae:	61 95       	neg	r22
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255

000001b2 <__divmodhi4_exit>:
 1b2:	08 95       	ret

000001b4 <__divmodhi4_neg1>:
 1b4:	f6 f7       	brtc	.-4      	; 0x1b2 <__divmodhi4_exit>
 1b6:	90 95       	com	r25
 1b8:	81 95       	neg	r24
 1ba:	9f 4f       	sbci	r25, 0xFF	; 255
 1bc:	08 95       	ret

000001be <__udivmodhi4>:
 1be:	aa 1b       	sub	r26, r26
 1c0:	bb 1b       	sub	r27, r27
 1c2:	51 e1       	ldi	r21, 0x11	; 17
 1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <__udivmodhi4_ep>

000001c6 <__udivmodhi4_loop>:
 1c6:	aa 1f       	adc	r26, r26
 1c8:	bb 1f       	adc	r27, r27
 1ca:	a6 17       	cp	r26, r22
 1cc:	b7 07       	cpc	r27, r23
 1ce:	10 f0       	brcs	.+4      	; 0x1d4 <__udivmodhi4_ep>
 1d0:	a6 1b       	sub	r26, r22
 1d2:	b7 0b       	sbc	r27, r23

000001d4 <__udivmodhi4_ep>:
 1d4:	88 1f       	adc	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	5a 95       	dec	r21
 1da:	a9 f7       	brne	.-22     	; 0x1c6 <__udivmodhi4_loop>
 1dc:	80 95       	com	r24
 1de:	90 95       	com	r25
 1e0:	bc 01       	movw	r22, r24
 1e2:	cd 01       	movw	r24, r26
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
